#version 450

struct Ray {
    vec3 origin;
    vec3 direction;
};

layout (set = 0, binding = 0, rgba8) writeonly uniform image2D outTexture;
layout (set = 0, binding = 1) uniform sampler samp;

layout (std430, set = 0, binding = 2) readonly buffer Rays {
    Ray data[];
} raysSSBO;

layout (std140, set = 0, binding = 3) readonly uniform Params {
    uvec2 res;
} params;

layout (std430, set = 0, binding = 4) readonly buffer Intersections {
    uint data[];
} intersects;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main() {
    uvec2 thid = gl_GlobalInvocationID.xy;
    if (thid.x > params.res.x || thid.y > params.res.y) return;

    uint readIndex = thid.x + (params.res.x * thid.y);
    Ray ray = raysSSBO.data[readIndex];
    vec3 color;// = ray.direction;
    if (intersects.data[readIndex] == 1) {
        color = vec3(1.0, 0.0, 0.0);
    }
    else {
        float t = 0.5 * (ray.direction.y + 1.0);
        color = (1.0 - t) * vec3(1.0) + t * vec3(0.3, 0.5, 0.7);
    }
    imageStore(outTexture, ivec2(thid), vec4(color, 1.0));
}

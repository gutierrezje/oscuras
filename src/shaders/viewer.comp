#version 450

struct Ray {
    vec3 origin;
    vec3 direction;
};

layout (set = 0, binding = 0, rgba8) writeonly uniform image2D outTexture;
layout (set = 0, binding = 1) uniform sampler samp;
layout (std430, set = 0, binding = 2) readonly buffer Rays {
    Ray data[];
} raysSSBO;
layout (std140, set = 0, binding = 3) readonly uniform Params {
    uvec2 res;
} params;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main() {
    uvec2 writeIndex = gl_GlobalInvocationID.xy;
    if (writeIndex.x > params.res.x || writeIndex.y > params.res.y) return;

    uint readIndex = writeIndex.x + (params.res.x * writeIndex.y);
    Ray ray = raysSSBO.data[readIndex];

    float t = 0.5 * (ray.direction.y + 1.0);
    vec3 color = (1.0 - t) * vec3(1.0) + t * vec3(0.3, 0.5, 0.7);
    imageStore(outTexture, ivec2(writeIndex), vec4(color, 1.0));
}
